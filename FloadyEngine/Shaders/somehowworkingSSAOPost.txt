
struct PSInput
{
	float4 position : SV_POSITION;
	float2 uv : TEXCOORD0;
};

struct PSOutput
{
	float4 color;
};

struct MyData
{
	float4x4 g_invViewProjMatrix;
	float4x4 g_projMatrix;
	float4x4 g_invProjMatrix;
	float4x4 g_viewMatrix;
	float4x4 g_InvViewMatrix;
};

Texture2D<float4> g_colortexture : register(t0);
Texture2D<float4> g_normaltexture : register(t1);
Texture2D<float> g_depthTexture : register(t2);
Texture2D<float> g_shadowTexture : register(t3);
Texture2D<float4> g_combinedTexture : register(t4);
Texture2D<float4> scratchbuff : register(t5);
SamplerState g_sampler : register(s0);
MyData constData : register(b0);

static const int kernelSize = 16;
static const int noiseSize = 16;

float3 getPosition(in float2 uv)
{	
	float depth = g_depthTexture.Sample(g_sampler, uv); 
	float4 H = float4(uv.x * 2 - 1, (uv.y) * 2 - 1, depth , 1);
	
	return H.xyz;
}

float3 getWorldPos(in float2 uv)
{	
	float depth = g_depthTexture.Sample(g_sampler, uv); 
	float4 H = float4(uv.x * 2 - 1, (uv.y) * 2 - 1, depth , 1);
	float4 D = mul(H, constData.g_invViewProjMatrix); 
	float4 worldPos = D / D.w;
	worldPos.w = 1.0f;
 	
	return worldPos.xyz;
}

float3 getViewPos(in float2 uv)
{	
	float depth = g_depthTexture.Sample(g_sampler, uv); 
	float4 H = float4(uv.x * 2 - 1, (uv.y) * 2 - 1, depth , 1);
	float4 D = mul(H, constData.g_invProjMatrix); 
	float4 worldPos = D / D.w;
	worldPos.w = 1.0f;
 	
	return float3(worldPos.xyz);//worldPos.xyz;
}

float3 getNormal(in float2 uv)
{
	return normalize(g_normaltexture.Sample(g_sampler, uv).xyz * 2.0f - 1.0f);
}

float3 getNormalViewSpace(in float2 uv)
{
	float4 H = float4(normalize(g_normaltexture.Sample(g_sampler, uv).xyz * 2.0f - 1.0f), 1);
	float4x4 modelViewProjection = mul(constData.g_viewMatrix, constData.g_projMatrix);
	float3 n = mul(H.xyz, (float3x3)modelViewProjection); 
	
	return normalize(n);
}

PSInput VSMain(float4 position : POSITION, float4 normal : NORMAL, float4 uv : TEXCOORD)
{
	PSInput result;
	result.position = float4(position.xyz, 1);
	result.uv = uv.xy;
	return result;
}

float pleudorandom( in float2 p )
{
    float2 K1 = float2(
        23.14069263277926, // e^pi (Gelfond's constant)
         2.665144142690225 // 2^sqrt(2) (Gelfondâ€“Schneider constant)
    );
    return frac( cos( dot(p,K1) ) * 12345.6789 );
}

float random(in float amin, in float amax, in float2 uv)
{
	return amin + (pleudorandom(uv) * (amax-amin));
}

float doAmbientOcclusion(in float2 tcoord,in float2 uv, in float3 p, in float3 cnorm)
{
	float g_intensity = 1.0;
	float g_scale = 1.0;
	float g_bias = -0.2;
	float3 diff = getViewPos(tcoord + uv) - p;
	const float3 v = normalize(diff);
	const float d = length(diff)*g_scale;
	return max(0.0,dot(cnorm,v)-g_bias)*(1.0/(1.0+d))*g_intensity;
}

PSOutput PSMain(PSInput input) : SV_TARGET
{   
	PSOutput output;
	
	const float2 vec[4] = {float2(1,0),float2(-1,0),
			float2(0,1),float2(0,-1)};

	float3 p = getViewPos(input.uv);
	float3 n = getNormalViewSpace(input.uv);

	// create kernel
	float3 kernel[100];
	for (int i = 0; i < kernelSize; ++i) {
	   kernel[i] = float3(
	   random(-1.0f, 1.0f, input.uv),
	   random(-1.0f, 1.0f, input.uv),
	   random(0.0f, 1.0f, input.uv));
	   normalize(kernel[i]);
	    float scale = float(i) / float(kernelSize);
		scale = lerp(0.1f, 1.0f, scale * scale);
		kernel[i] *= scale;
	}
	
	// generate noise map
	float3 noiseMap[1];
	for (int i = 0; i < 1; ++i) {
		noiseMap[i] = float3(
			random(-1.0f, 1.0f, input.uv),
			random(-1.0f, 1.0f, 0.5 * input.uv),
			0.0f);
		normalize(noiseMap[i]);
	}

	float3 normal = n;
	float3 origin = getViewPos(input.uv);
	float3 rvec = noiseMap[0] * 2.0 - 1.0;
	float3 tangent = normalize(rvec - normal * dot(rvec, normal));
	float3 bitangent = cross(normal, tangent);
	float3x3 tbn = {tangent.x, tangent.y, tangent.z,
					bitangent.x, bitangent.y, bitangent.z,
					normal.x, normal.y, normal.z};
	tbn = transpose( tbn ); 
	
	float occlusion = 0.0;
	int uSampleKernelSize = 15;
	float uRadius = 15.3f;
	for (int i = 10; i < uSampleKernelSize; ++i) 
	{
		// get sample position:
	   float3 sample = mul(kernel[i], tbn);  // world normal
	   sample = sample * uRadius + origin;
	  
		// project sample position:
		float4 offset = float4(sample, 1.0); // temp store for debug view
		float4 newUvs = float4(sample, 1.0); 
		newUvs = mul(offset, constData.g_projMatrix);
		newUvs.xy /= newUvs.w;
		newUvs.xy = newUvs.xy * 0.5 + 0.5;

		// get sample depth:
		float sampleDepth = getViewPos(newUvs.xy).z;

		// range check & accumulate:
	   float rangeCheck= abs(origin.z - sampleDepth) < uRadius ? 1.0 : 0.0;
	   occlusion += (sampleDepth <= sample.z ? 1.0 : 0.0) * rangeCheck;
	  
		//output.color = float4(offset.xyz / 100,1);
		//output.color = float4(newUvs.xy, 0, 1) * occlusion;
		//output.color = float4(input.uv.xy, 0, 1);
		//output.color = float4(getViewPos(input.uv)/ 10.0, 1);
		//output.color = float4(sample / 100, 1);
		//output.color = float4(origin / 100, 1);
		//output.color = float4(sampleDepth / 100, 0, 0, 1);
		//output.color = float4(origin.z / 100, 0, 0, 1);
		//output.color = float4(10 * abs(origin.z - sampleDepth).xxx, 1);
		//return output;	
	}

	
	// METHOD 2
	p = getViewPos(input.uv);
	n = getNormalViewSpace(input.uv);

	float2 rand = normalize(float2(random(-1.0f, 1.0f, input.uv), random(-1.0f, 1.0f, 0.8f * input.uv)));

	float ao = 0.0f;
	float g_sample_rad = 0.1;
	float rad = g_sample_rad/p.z;

	//**SSAO Calculation**//
	float g_far_clip = 400.0f;
	int iterations = 4;
	//int iterations = lerp(6.0,2.0,p.z/g_far_clip);
	for (int j = 0; j < iterations; ++j)
	{
	  float2 coord1 = reflect(vec[j],rand)*rad;
	  float2 coord2 = float2(coord1.x*0.707 - coord1.y*0.707,
				  coord1.x*0.707 + coord1.y*0.707);
	  
	  ao += doAmbientOcclusion(input.uv,coord1*0.25, p, n);
	  ao += doAmbientOcclusion(input.uv,coord2*0.5, p, n);
	  ao += doAmbientOcclusion(input.uv,coord1*0.75, p, n);
	  ao += doAmbientOcclusion(input.uv,coord2, p, n);
	}
	ao/=(float)iterations*4.0;
	//**END**//
	
	
	output.color = float4(scratchbuff.Sample(g_sampler, input.uv).xyz, 1.0);
	output.color = float4(1.0f - ao.xxx, 1);
	//output.color = float4((occlusion.xxx / uSampleKernelSize), 1);
	//output.color += float4(tangent.xyz, 1);
	//output.color = float4(origin.xyz / 40, 1);
	//output.color = float4(n.xyz * 0.5 + 0.5 , 1);
	//output.color = float4(rand, 0, 1);
	return output;	
}
